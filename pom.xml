<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.github.java-native</groupId>
  <artifactId>java-simple-serial-connector</artifactId>
  <version>2.8.1-SNAPSHOT</version>

  <properties>
    <maven.compiler.source>1.6</maven.compiler.source>
    <maven.compiler.target>1.6</maven.compiler.target>
    <maven.compiler.release>6</maven.compiler.release>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- skip javah execution for java9+, see profile below. -->
    <javah.skip>false</javah.skip>
    <!-- native lib loader (dependency) -->
    <!-- TODO: Handle linux_32 -->
    <native.lib.directory>linux_64</native.lib.directory>

    <!-- custom directories and file paths -->
    <cmake.generated.directory>${project.build.directory}/cmake</cmake.generated.directory>
    <nativelib.directory>${project.build.outputDirectory}/META-INF/lib</nativelib.directory>

    <!-- custom cmake options -->
    <cmake.generate.args></cmake.generate.args>
    <cmake.build.args></cmake.build.args>
    <!-- options given in compile phase after double dashes. -->
    <cmake.buildtool.args></cmake.buildtool.args>

    <!-- dependency versions -->
    <dependency.nativelibloader.version>2.0.2</dependency.nativelibloader.version>

    <!-- plugin versions -->
    <plugin.antrun.version>1.8</plugin.antrun.version>
    <plugin.nar.version>3.6.0</plugin.nar.version>
    <plugin.animalsniffer.version>1.17</plugin.animalsniffer.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.scijava</groupId>
      <artifactId>native-lib-loader</artifactId>
      <version>${dependency.nativelibloader.version}</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
  </dependencies>


  <build>
    <!-- FIXME: apply maven conventions -->
    <sourceDirectory>src/java</sourceDirectory>

    <plugins>
      <!--
         create header file
         CMAKE can only do this from jar archives.
       -->
      <plugin>
        <groupId>com.github.maven-nar</groupId>
        <artifactId>nar-maven-plugin</artifactId>
        <version>${plugin.nar.version}</version>
        <extensions>true</extensions>

        <executions>
          <execution>
            <id>default-nar-javah</id>
            <goals>
              <goal>nar-javah</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <skip>${javah.skip}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- execute cmake -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${plugin.antrun.version}</version>

        <executions>
          <execution>
            <id>cmake-generate</id>
            <goals><goal>run</goal></goals>
            <phase>generate-sources</phase>
            <configuration>
              <target name="cmake-generate">
                <mkdir dir="${cmake.generated.directory}" />
                <exec executable="cmake" dir="${cmake.generated.directory}" failonerror="true">
                  <arg line="${project.basedir}" />
                  <arg line="-DJNI_NATIVE_LIB_DIR=${nativelib.directory}" />
                  <arg line="-DJSSC_VERSION=${project.version}" />
                  <arg line="${cmake.generate.args}" />
                </exec>
              </target>
            </configuration>
          </execution>

          <execution>
            <id>cmake-compile</id>
            <goals><goal>run</goal></goals>
            <phase>compile</phase>
            <configuration>
              <target name="cmake-build">
                <!-- Copy header from target/nar/ (java < 9) -->
                <copy todir="${cmake.generated.directory}" flatten="true" overwrite="true" verbose="true" failonerror="false">
                  <fileset dir="${project.build.directory}/nar/" includes="**/*.h"/>
                </copy>

                <exec executable="cmake" dir="${cmake.generated.directory}" failonerror="true">
                  <arg line="--build" />
                  <arg line="." />
                  <arg line="${cmake.build.args}" />
                  <arg line="--" />
                  <arg line="${cmake.buildtool.args}" />
                </exec>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M3</version>

      </plugin>

      <!-- check for java 6 compatiblity -->
       <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-maven-plugin</artifactId>
        <version>${plugin.animalsniffer.version}</version>
        <configuration>
          <signature>
            <groupId>org.codehaus.mojo.signature</groupId>
            <artifactId>java16</artifactId>
            <version>1.1</version>
          </signature>
        </configuration>
        <executions>
          <execution>
            <id>ensure-java-1.6-class-library</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <!--
      javah is gone since java9, do not invoke it.
    -->
    <profile>
      <id>java-9</id>
      <activation>
        <jdk>[9,)</jdk>
      </activation>
      <properties>
        <javah.skip>true</javah.skip>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <artifactId>maven-compiler-plugin</artifactId>
              <configuration>
                <compilerArgs>
                  <arg>-h</arg>
                  <arg>${cmake.generated.directory}</arg>
                </compilerArgs>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <!-- configure cmake profiles -->

    <!-- cmake windows-amd64 profile -->
    <profile>
      <id>cmake-win64</id>
      <activation>
        <os>
          <family>Windows</family>
          <arch>amd64</arch>
        </os>
      </activation>
      <properties>
        <native.lib.directory>windows_64</native.lib.directory>
        <cmake.generate.args>-DCMAKE_GENERATOR_PLATFORM=x64 -DNATIVE_LIB_DIR=${native.lib.directory}</cmake.generate.args>
        <cmake.build.args>--config Release</cmake.build.args>
      </properties>
    </profile>

    <!-- cmake windows-x86 profile -->
    <profile>
      <id>cmake-win32</id>
      <activation>
        <os>
          <family>Windows</family>
          <arch>x86</arch>
        </os>
      </activation>
      <properties>
        <native.lib.directory>windows_32</native.lib.directory>
        <cmake.generate.args>-DNATIVE_LIB_DIR=${native.lib.directory}</cmake.generate.args>
        <cmake.build.args>--config Release</cmake.build.args>
      </properties>
    </profile>

    <!-- mingw32 profile -->
    <profile>
      <id>cmake-mingw32</id>
      <properties>
        <native.lib.directory>windows_32</native.lib.directory>
        <cmake.generate.args>-DCMAKE_TOOLCHAIN_FILE=toolchain/Mingw32.cmake -DNATIVE_LIB_DIR=${native.lib.directory}</cmake.generate.args>
      </properties>
    </profile>

    <!-- mingw64 profile -->
    <profile>
      <id>cmake-mingw64</id>
      <properties>
        <native.lib.directory>windows_64</native.lib.directory>
        <cmake.generate.args>-DCMAKE_TOOLCHAIN_FILE=toolchain/Mingw64.cmake -DNATIVE_LIB_DIR=${native.lib.directory}</cmake.generate.args>
      </properties>
    </profile>

    <!-- cmake mac profile -->
    <profile>
      <id>cmake-macos</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <!-- final dir is: ${cmake.root.dir}/${cmake.child.dir} -->
        <native.lib.directory>osx_64</native.lib.directory>
        <cmake.generate.args>-DNATIVE_LIB_DIR=${native.lib.directory}</cmake.generate.args>
      </properties>

    </profile>

  </profiles>

</project>
