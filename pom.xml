<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.github.java-native</groupId>
  <artifactId>java-simple-serial-connector</artifactId>
  <version>2.8.1-SNAPSHOT</version>

  <properties>
    <maven.compiler.source>1.6</maven.compiler.source>
    <maven.compiler.target>1.6</maven.compiler.target>
    <maven.compiler.release>6</maven.compiler.release>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- skip javah execution for java9+, see profile below. -->
    <javah.skip>false</javah.skip>
    <jar.default.skip>false</jar.default.skip>
    <cmake.generate.skip>false</cmake.generate.skip>
    <cmake.compile.skip>false</cmake.compile.skip>
    <os.bitness>${sun.arch.data.model}</os.bitness>
    <os.family>${os.detected.name}</os.family>
    <!-- native lib loader (dependency) -->

    <!-- custom directories and file paths -->
    <cmake.generated.directory>${project.build.directory}/cmake</cmake.generated.directory>

    <!-- custom cmake options -->
    <cmake.generate.args></cmake.generate.args>
    <cmake.generate.extra></cmake.generate.extra>
    <cmake.build.args></cmake.build.args>
    <!-- options given in compile phase after double dashes. -->
    <cmake.buildtool.args></cmake.buildtool.args>

    <!-- dependency versions -->
    <dependency.logback.version>1.2.3</dependency.logback.version>
    <dependency.nativelibloader.version>2.3.3</dependency.nativelibloader.version>

    <!-- plugin versions -->
    <plugin.antrun.version>1.8</plugin.antrun.version>
    <plugin.nar.version>3.6.0</plugin.nar.version>
    <plugin.animalsniffer.version>1.17</plugin.animalsniffer.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.scijava</groupId>
      <artifactId>native-lib-loader</artifactId>
      <version>${dependency.nativelibloader.version}</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${dependency.logback.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>


  <build>
    <defaultGoal>install</defaultGoal>
    <!-- FIXME: apply maven conventions -->
    <sourceDirectory>src/java</sourceDirectory>

    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.6.2</version>
      </extension>
    </extensions>

    <plugins>
      <!--
         create header file
         CMAKE can only do this from jar archives.
       -->
      <plugin>
        <groupId>com.github.maven-nar</groupId>
        <artifactId>nar-maven-plugin</artifactId>
        <version>${plugin.nar.version}</version>
        <extensions>true</extensions>

        <executions>
          <execution>
            <id>default-nar-javah</id>
            <goals>
              <goal>nar-javah</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <skip>${javah.skip}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- execute cmake -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${plugin.antrun.version}</version>

        <executions>
          <execution>
            <id>cmake-generate</id>
            <goals><goal>run</goal></goals>
            <phase>generate-sources</phase>
            <configuration>
              <skip>${cmake.generate.skip}</skip>
              <target name="cmake-generate">
                <mkdir dir="${cmake.generated.directory}" />
                <exec executable="cmake" dir="${cmake.generated.directory}" failonerror="true">
                  <arg line="${project.basedir}" />
                  <arg line="-DMAVEN_OUTPUT_DIRECTORY=${project.build.outputDirectory}" />
                  <arg line="-DJSSC_VERSION=${project.version}" />
                  <arg line="${cmake.generate.args}" />
                  <arg line="${cmake.generate.extra}" />
                </exec>
              </target>
            </configuration>
          </execution>

          <execution>
            <id>cmake-compile</id>
            <goals><goal>run</goal></goals>
            <phase>compile</phase>
            <configuration>
              <skip>${cmake.compile.skip}</skip>
              <target name="cmake-build">
                <!-- Copy header from target/nar/ (java < 9) -->
                <copy todir="${cmake.generated.directory}" flatten="true" overwrite="true" verbose="true" failonerror="false">
                  <fileset dir="${project.build.directory}/nar/" includes="**/*.h"/>
                </copy>

                <exec executable="cmake" dir="${cmake.generated.directory}" failonerror="true">
                  <arg line="--build" />
                  <arg line="." />
                  <arg line="${cmake.build.args}" />
                  <arg line="--" />
                  <arg line="${cmake.buildtool.args}" />
                </exec>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M3</version>

      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.1.1</version>

        <configuration>
          <classifier>${os.family}-${os.arch}-${os.bitness}</classifier>
        </configuration>
      </plugin>

      <!-- also package the uber-jar -->
      <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-assembly-plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <descriptors>
            <descriptor>src/assembly/uber-jar.xml</descriptor>
          </descriptors>
          <appendAssemblyId>false</appendAssemblyId>
        </configuration>

        <executions>
          <execution>
            <id>make-assembly</id> <!-- this is used for inheritance merges -->
            <phase>package</phase> <!-- bind to the packaging phase -->
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>



      <!-- check for java 6 compatiblity -->
       <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>animal-sniffer-maven-plugin</artifactId>
        <version>${plugin.animalsniffer.version}</version>
        <configuration>
          <signature>
            <groupId>org.codehaus.mojo.signature</groupId>
            <artifactId>java16</artifactId>
            <version>1.1</version>
          </signature>
        </configuration>
        <executions>
          <execution>
            <id>ensure-java-1.6-class-library</id>
            <phase>verify</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <!--
      javah is gone since java9, do not invoke it.
    -->
    <profile>
      <id>java-9</id>
      <activation>
        <jdk>[9,)</jdk>
      </activation>
      <properties>
        <javah.skip>true</javah.skip>
      </properties>
      <build>
        <pluginManagement>
          <plugins>
            <plugin>
              <artifactId>maven-compiler-plugin</artifactId>
              <configuration>
                <compilerArgs>
                  <arg>-h</arg>
                  <arg>${cmake.generated.directory}</arg>
                </compilerArgs>
              </configuration>
            </plugin>
          </plugins>
        </pluginManagement>
      </build>
    </profile>

    <!--
      Profile for only collecting the existing binaries for an uber-jar distribution.
      This profile is only useful for java developers who cannot invoke cmake.
    -->
    <profile>
      <id>nonativebuild</id>
      <!-- skip everything which has to do with native compilation. -->
      <properties>
        <javah.skip>true</javah.skip>
        <jar.default.skip>true</jar.default.skip>
        <maven.test.skip>true</maven.test.skip>
        <cmake.generate.skip>true</cmake.generate.skip>
        <cmake.compile.skip>true</cmake.compile.skip>
      </properties>
    </profile>

    <!-- configure cmake profiles -->

    <!-- cmake linux 32-bit profile -->
    <profile>
      <id>m32</id>
      <properties>
        <os.arch>x86</os.arch>
        <os.bitness>32</os.bitness>
        <!-- skip test on cross-compile -->
        <maven.test.skip>true</maven.test.skip>
        <cmake.generate.args>-DNATIVE_LIB_DIR=${os.family}_${os.bitness}</cmake.generate.args>
        <cmake.generate.extra>-DFORCE_M32=True</cmake.generate.extra>
      </properties>
    </profile>

    <!-- cmake windows-amd64 profile -->
    <profile>
      <id>win64</id>
      <activation>
        <os>
          <family>Windows</family>
          <arch>amd64</arch>
        </os>
      </activation>
      <properties>
        <cmake.generate.args>-DCMAKE_GENERATOR_PLATFORM=x64 -DNATIVE_LIB_DIR=windows_${os.bitness}</cmake.generate.args>
        <cmake.build.args>--config Release</cmake.build.args>
      </properties>
    </profile>

    <!-- cmake windows-x86 profile -->
    <profile>
      <id>win32</id>
      <activation>
        <os>
          <family>Windows</family>
          <arch>x86</arch>
        </os>
      </activation>
      <properties>
        <cmake.generate.args>-DNATIVE_LIB_DIR=windows_${os.bitness}</cmake.generate.args>
        <cmake.build.args>--config Release</cmake.build.args>
      </properties>
    </profile>

    <!-- mingw32 profile -->
    <profile>
      <id>mingw32</id>
      <properties>
        <os.family>windows</os.family>
        <os.arch>x86</os.arch>
        <os.bitness>32</os.bitness>
        <!-- skip test on cross-compile -->
        <maven.test.skip>true</maven.test.skip>
        <cmake.generate.args>-DCMAKE_TOOLCHAIN_FILE=toolchain/Mingw${os.bitness}.cmake -DNATIVE_LIB_DIR=${os.family}_${os.bitness}</cmake.generate.args>
      </properties>
    </profile>

    <!-- mingw64 profile -->
    <profile>
      <id>mingw64</id>
      <properties>
        <os.family>windows</os.family>
        <os.arch>x86_64</os.arch>
        <os.bitness>64</os.bitness>
        <!-- skip test on cross-compile -->
        <maven.test.skip>true</maven.test.skip>
        <cmake.generate.args>-DCMAKE_TOOLCHAIN_FILE=toolchain/Mingw${os.bitness}.cmake -DNATIVE_LIB_DIR=${os.family}_${os.bitness}</cmake.generate.args>
      </properties>
    </profile>

    <!-- arm soft float profile -->
    <profile>
      <id>armsf</id>
      <properties>
        <os.family>linux</os.family>
        <os.arch>armsf</os.arch><!-- FIXME "armhf" isn't an architecture -->
        <os.bitness>32</os.bitness>
        <!-- skip test on cross-compile -->
        <maven.test.skip>true</maven.test.skip>
        <!-- Ubuntu 14.04 and older only had one -->
        <cmake.generate.args>-DCMAKE_TOOLCHAIN_FILE=toolchain/Armsf.cmake -DNATIVE_LIB_DIR=arm_32sf</cmake.generate.args>
      </properties>
    </profile>

    <!-- arm hard float profile -->
    <profile>
      <id>armhf</id>
      <properties>
        <os.family>linux</os.family>
        <os.arch>armhf</os.arch><!-- FIXME "armhf" isn't an architecture -->
        <os.bitness>32</os.bitness>
        <!-- skip test on cross-compile -->
        <maven.test.skip>true</maven.test.skip>
        <cmake.generate.args>-DCMAKE_TOOLCHAIN_FILE=toolchain/Armhf.cmake -DNATIVE_LIB_DIR=arm_32hf</cmake.generate.args>
      </properties>
    </profile>

    <!-- arm trusty profile -->
    <profile>
      <id>armtrusty</id>
      <properties>
        <!-- trusty didn't have g++-5, etc -->
        <cmake.generate.extra>-DSKIP_COMPILER_VERSION=True</cmake.generate.extra>
      </properties>
    </profile>

  </profiles>

</project>
